plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.beryx.jlink' version '2.24.4'
    id 'com.palantir.docker' version '0.28.0'
    id 'info.solidsoft.pitest' version '1.7.0'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'org.javamodularity.moduleplugin' version '1.8.10' apply false
}

group 'jasmine.jragon'
version '0.21.1'

application {
    mainClassName = 'bomb.Main'
    mainModule.set('bomb')
}

compileJava {
    options.encoding("UTF-8")
}

compileTestJava {
    options.encoding("UTF-8")
}

javadoc {
    options.encoding("UTF-8")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.opencsv:opencsv:5.5.2'
    implementation 'org.javatuples:javatuples:1.2'
    //implementation 'io.github.fvarrui:javpackager:1.5.1'
    implementation 'org.jgrapht:jgrapht-ext:1.5.1'
    implementation 'org.jetbrains:annotations:22.0.0'

    implementation('com.jfoenix:jfoenix:9.0.4') {
        exclude group: "org.javafx"
    }
    implementation('io.github.palexdev:materialfx:11.12.0') {
        exclude group: "org.javafx"
    }

    testImplementation 'org.testng:testng:7.4.0'
}

def firstInstance = project.hasProperty("thread0")
def secondInstance = project.hasProperty("thread1")
def thirdInstance = project.hasProperty("thread2")
def fourthInstance = project.hasProperty("thread3")
def fifthInstance = project.hasProperty("thread4")
def sixthInstance = project.hasProperty("thread5")

def includedDirectories = [
        'bomb/tools/data/**', 'bomb/tools/*', 'bomb/tools/logic/*'
]

test {
    useTestNG() {
        if(firstInstance) {
            suites "src/test/resources/suites/suiteOne.xml"
            includedDirectories.addAll([
                    'bomb/modules/ab/**', 'bomb/modules/c/**',
                    'bomb/modules/dh/**', 'bomb/modules/il/**',
            ])
        } else if (secondInstance) {
            suites "src/test/resources/suites/suiteTwo.xml"
            includedDirectories.addAll([
                    'bomb/modules/m/**', 'bomb/modules/np/**',
                    'bomb/modules/r/**', 'bomb/modules/s/**'
            ])
        } else if (thirdInstance) {
            suites "src/test/resources/suites/suiteThree.xml"
            includedDirectories.addAll([
                    'bomb', 'bomb/tools/filter/*',
                    'bomb/modules/t/**', 'bomb/modules/wz/**'
            ])
        }
    }
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    reports.xml.enabled(true)

    if (includedDirectories.size() != 3) {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, include: includedDirectories, exclude: ['**/*Controller.*'])
            }))
        }
    }
}

static List<String> getTargetClasses(boolean firstInstance, boolean secondInstance,
                                     boolean thirdInstance, boolean fourthInstance,
                                     boolean fifthInstance, boolean sixthInstance) {
    if (firstInstance)
        return ['bomb.modules.ab.**']
    else if (secondInstance)
        return ['bomb.modules.c.**']
    else if (thirdInstance)
        return ['bomb.modules.dh.**', 'bomb.modules.il.**']
    else if (fourthInstance)
        return ['bomb.modules.m.**', 'bomb.modules.np.**']
    else if (fifthInstance)
        return ['bomb.modules.r.**', 'bomb.modules.s.**']
    else if (sixthInstance)
        return ['bomb.modules.t.**', 'bomb.modules.wz.**','bomb.tools.filter.*']
    return ['bomb.*']
}

pitest {
    targetClasses = getTargetClasses(firstInstance, secondInstance, thirdInstance,
            fourthInstance, fifthInstance, sixthInstance)
    outputFormats = ['HTML']
    testPlugin = 'testng'
}

javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.fxml']
}

jar.manifest.attributes(['Main-Class': "${mainClassName}"])

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${project.name}"
    }
}

//task fatJar(type: Jar) {
//    manifest.from jar.manifest
//    from {
//        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
//    } {
//        exclude "META-INF/*.SF"
//        exclude "META-INF/*.DSA"
//        exclude "META-INF/*.RSA"
//    }
//}
//
//artifacts {
//    archives fatJar
//}

docker {
    dependsOn(jar)
    name "${project.name.toLowerCase()}:${project.version}"
    files "${buildDir}/libs/${project.name}-${project.version}.jar"
    buildArgs([JAR_FILE: "${project.name}-${project.version}.jar"])
    tag('DockerHub', "jasminejragon/${project.name.replace("C", "-c").toLowerCase()}:${project.version}")
}

dockerfileZip {
    destinationDirectory = file("${buildDir}/zip/docker")
}

distZip {
    from projectDir
    include 'src/main/**/*'
    include 'gradle/wrapper/*'
    include 'markdown/*'
    include 'build.gradle', 'gradlew', 'gradlew.bat', 'README.md', 'Progress.md'
}

distTar {
    from projectDir
    include 'src/main/**/*'
    include 'gradle/wrapper/*'
    include 'markdown/*'
    include 'build.gradle', 'gradlew', 'gradlew.bat', 'README.md', 'Progress.md'
}

githubRelease {
    String baseFileName = "${buildDir}/distributions/${project.name}-${project.version}"
    releaseAssets = files("${baseFileName}.zip", "${baseFileName}.tar")
    tagName = "${project.version}"
    targetCommitish = 'main'
    owner = 'Ultraviolet-Ninja'
    overwrite = true
}

task releaseToGitHub() {
    doFirst {
        githubRelease.token = "${authToken}"
    }
    finalizedBy(tasks.getByName('githubRelease'))
}