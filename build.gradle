plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'com.palantir.docker' version '0.28.0'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
}

group 'jasmine.jragon'
version '0.21.0'

mainClassName = 'bomb.Main'

sourceCompatibility = 15
targetCompatibility = 15

compileJava {
    options.encoding("UTF-8")
}

compileTestJava {
    options.encoding("UTF-8")
}

javadoc {
    options.encoding("UTF-8")
}

repositories {
    mavenCentral()
}

dependencies {
//    compile 'org.jetbrains:annotations:22.0.0'

    implementation 'com.opencsv:opencsv:5.5.2'
    implementation 'com.jfoenix:jfoenix:9.0.4'
    implementation 'org.javatuples:javatuples:1.2'
    //implementation 'io.github.fvarrui:javpackager:1.5.1'
    implementation 'eu.hansolo:Medusa:11.7'
    implementation 'org.jgrapht:jgrapht-ext:1.5.1'
    implementation('io.github.palexdev:materialfx:11.12.0') {
        transitive(true)
        exclude group: "org.javafx"
    }

    testImplementation 'org.testng:testng:7.4.0'
}

test {
    useTestNG()
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    reports.xml.enabled(true)
}

javafx {
    version = '15'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

jar.manifest.attributes(['Main-Class': "${mainClassName}"])

task fatJar(type: Jar) {
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

artifacts {
    archives fatJar
}

docker {
    dependsOn(jar)
    name "${project.name.toLowerCase()}:${project.version}"
    files "${buildDir}/libs/${project.name}-${project.version}.jar"
    buildArgs([JAR_FILE: "${project.name}-${project.version}.jar"])
    tag('DockerHub', "jasminejragon/${project.name.replace("C", "-c").toLowerCase()}:${project.version}")
}

dockerfileZip {
    destinationDirectory = file("${buildDir}/zip/docker")
}

distZip {
    from projectDir
    include 'src/main/**/*'
    include 'gradle/wrapper/*'
    include 'markdown/*'
    include 'build.gradle', 'gradlew', 'gradlew.bat', 'README.md', 'Progress.md'
}

distTar {
    from projectDir
    include 'src/main/**/*'
    include 'gradle/wrapper/*'
    include 'markdown/*'
    include 'build.gradle', 'gradlew', 'gradlew.bat', 'README.md', 'Progress.md'
}

githubRelease {
    String baseFileName = "${buildDir}/distributions/${project.name}-${project.version}"
    releaseAssets = files("${baseFileName}.zip", "${baseFileName}.tar")
    tagName = "${project.version}"
    targetCommitish = 'main'
    owner = 'Ultraviolet-Ninja'
    overwrite = true
}

task releaseToGitHub() {
    doFirst {
        githubRelease.token = "${authToken}"
    }
    finalizedBy(tasks.getByName('githubRelease'))
}