plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.beryx.jlink' version '2.25.0'
    id 'com.palantir.docker' version '0.34.0'
    id 'info.solidsoft.pitest' version '1.7.4'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'com.github.breadmoirai.github-release' version '2.4.1'
//    Another packing plugin to "check out"
//    id "io.ktor.plugin" version "2.2.1"
}

group 'jasmine.jragon'
version '0.22.2'

java {
    sourceCompatibility(17)
    targetCompatibility(17)
}

application {
    mainClassName = project.hasProperty('testingArea') ?
            'bomb.TestingArea' :
            'bomb.Main'

    mainModule.set('centurion')
}

compileJava {
    options.encoding("UTF-8")
}

compileTestJava {
    options.encoding("UTF-8")
}

javadoc {
    options.encoding("UTF-8")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.opencsv:opencsv:5.7.1'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'org.jgrapht:jgrapht-ext:1.5.1'
    implementation 'org.jetbrains:annotations:23.1.0'
    //implementation 'io.github.fvarrui:javpackager:1.5.1'

    implementation('com.jfoenix:jfoenix:9.0.4') {
        exclude group: "org.javafx"
    }
    implementation('io.github.palexdev:materialfx:11.12.0') {
        exclude group: "org.javafx"
    }

    testImplementation 'org.testng:testng:7.7.0'
    testImplementation 'org.slf4j:slf4j-api:2.0.5'
    testImplementation 'org.slf4j:slf4j-simple:2.0.5'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.12.2'
}

def firstInstance = project.hasProperty('thread0')
def secondInstance = project.hasProperty('thread1')
def thirdInstance = project.hasProperty('thread2')
def fourthInstance = project.hasProperty('thread3')
def fifthInstance = project.hasProperty('thread4')
def sixthInstance = project.hasProperty('thread5')

def includedTestDirectories = [
        'bomb/tools/data/**', 'bomb/tools/*', 'bomb/tools/logic/*'
]

test {
    useTestNG() {
        String baseDirectory = 'src/test/resources/suites/suite'

        if(firstInstance) {
            suites "${baseDirectory}One.xml"
            includedTestDirectories.addAll([
                    'bomb/modules/ab/**', 'bomb/modules/c/**'
            ])
        } else if (secondInstance) {
            suites "${baseDirectory}Two.xml"
            includedTestDirectories.addAll([
                    'bomb/modules/dh/**', 'bomb/modules/il/**', 'bomb/modules/m/**'
            ])
        } else if (thirdInstance) {
            suites "${baseDirectory}Three.xml"
            includedTestDirectories.addAll([
                    'bomb/modules/np/**', 'bomb/modules/r/**'
            ])
        } else if (fourthInstance) {
            suites "${baseDirectory}Four.xml"
            includedTestDirectories.addAll([
                    'bomb/modules/s/**', 'bomb/modules/t/**'
            ])
        } else if (fifthInstance) {
            suites "${baseDirectory}Five.xml"
            includedTestDirectories.addAll([
                    'bomb', 'bomb/tools/filter/*', 'bomb/modules/wz/**'
            ])
        }
    }
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    reports.xml.enabled(true)

    if (includedTestDirectories.size() != 3) {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, include: includedTestDirectories, exclude: ['**/*Controller.*'])
            }))
        }
    }
}

static List<String> getTargetClasses(boolean firstInstance, boolean secondInstance,
                                     boolean thirdInstance, boolean fourthInstance,
                                     boolean fifthInstance, boolean sixthInstance) {
    String baseModuleDirectory = 'bomb.modules.'

    if (firstInstance)
        return ["${baseModuleDirectory}ab.**"]
    else if (secondInstance)
        return ["${baseModuleDirectory}c.**"]
    else if (thirdInstance)
        return ["${baseModuleDirectory}dh.**", "${baseModuleDirectory}il.**"]
    else if (fourthInstance)
        return ["${baseModuleDirectory}m.**", "${baseModuleDirectory}np.**"]
    else if (fifthInstance)
        return ["${baseModuleDirectory}r.**", "${baseModuleDirectory}s.**"]
    else if (sixthInstance)
        return ["${baseModuleDirectory}t.**", "${baseModuleDirectory}wz.**", 'bomb.tools.filter.*']
    return ['bomb.*']
}

pitest {
    targetClasses = getTargetClasses(firstInstance, secondInstance, thirdInstance, fourthInstance,
            fifthInstance, sixthInstance)
    outputFormats = ['HTML']
    testPlugin = 'testng'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

jar.manifest.attributes(['Main-Class': "${mainClassName}"])

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    addExtraDependencies("javafx")

    def opSys = org.gradle.internal.os.OperatingSystem.current()
    String iconBaseFilename = "${buildDir}/resources/main/bomb/KTANE logo"

    if (opSys.windows) {
        launcher {
            name = 'Gradle Centurion Win'
        }

        jpackage {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu']
            imageOptions += ['--icon', "${iconBaseFilename}.ico"]
        }
    } else if (opSys.linux) {
        launcher {
            name = 'Gradle Centurion Linux'
        }

        jpackage {
            imageOptions += ['--icon', "${iconBaseFilename}.png"]
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut'
            ]
        }
    } else {
        launcher {
            name = 'Gradle Centurion Mac'
        }

        jpackage {
            imageOptions += ['--icon', "${iconBaseFilename}.icns"]
        }
    }
}

//docker {
//    dependsOn(jar)
//    name "${project.name.toLowerCase()}:${project.version}"
//    files "${buildDir}/libs/${project.name}-${project.version}.jar"
//    buildArgs([JAR_FILE: "${project.name}-${project.version}.jar"])
//    tag('DockerHub', "jasminejragon/${project.name.replace("C", "-c").toLowerCase()}:${project.version}")
//}

docker {
    dependsOn(jar)
    name "${project.name.replace("C", "-c").toLowerCase()}:${project.version}"
    copySpec.from("src/main").from("gradle").into("necessaryFiles")
    files 'build.gradle', 'settings.gradle'
}

dockerfileZip {
    destinationDirectory = file("${buildDir}/zip/docker")
}

//distZip {
//    from projectDir
//    include 'src/main/**/*'
//    include 'gradle/wrapper/*'
//    include 'markdown/*'
//    include 'build.gradle', 'gradlew', 'gradlew.bat', 'README.md', 'Progress.md', 'Learned.md'
//}
//
//distTar {
//    from projectDir
//    include 'src/main/**/*'
//    include 'gradle/wrapper/*'
//    include 'markdown/*'
//    include 'build.gradle', 'gradlew', 'gradlew.bat', 'README.md', 'Progress.md', 'Learned.md'
//}

githubRelease {
    tagName = "${project.version}"
    owner = 'Ultraviolet-Ninja'
//    overwrite = true

    def opSys = org.gradle.internal.os.OperatingSystem.current()
    String baseDirectory = "${buildDir}/jpackage/Gradle Centurion "

    if (opSys.windows) {
        releaseAssets.from("${baseDirectory}Win")
    } else if (opSys.linux) {
        releaseAssets.from("${baseDirectory}Linux")
    } else {
        releaseAssets.from("${baseDirectory}Mac")
    }
}

tasks.register('releaseToGitHub') {
    doFirst {
        githubRelease.token = "${authToken}"
    }
    finalizedBy(tasks.named('githubRelease'))
}
